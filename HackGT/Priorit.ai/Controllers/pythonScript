import sys
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.model_selection import train_test_split

# Load the CSV files (data)
kitchenDF = pd.read_csv("https://raw.githubusercontent.com/schakk34/Priorit.ai/refs/heads/main/kitchenAndBath.csv")
roomDF = pd.read_csv("https://raw.githubusercontent.com/schakk34/Priorit.ai/refs/heads/main/roomIssue.csv")
electricalDF = pd.read_csv("https://raw.githubusercontent.com/schakk34/Priorit.ai/refs/heads/main/electrical.csv")

# Function for training the model
def test(df):
    X_train, X_test, y_train, y_test = train_test_split(df['Complaint'], df['Issue'], shuffle=True, test_size=0.2)
    tfidf = TfidfVectorizer(sublinear_tf=True, min_df=4, max_df=0.6, norm='l1', ngram_range=(1, 2), stop_words='english')
    X_train_counts = tfidf.fit_transform(X_train)
    model = MultinomialNB(alpha=1e-04)
    model.fit(X_train_counts, y_train)
    return model, tfidf

# Process the category and choose the relevant dataframe
def select_dataframe(category):
    if category.lower() == 'kitchen_bath':
        return kitchenDF
    elif category.lower() == 'lighting_electrical':
        return electricalDF
    else:
        return roomDF

# Function for making a prediction based on the user's input
def make_prediction(category, description):
    df = select_dataframe(category)
    model, tfidf = test(df)
    input_counts = tfidf.transform([description])
    prediction = model.predict(input_counts)
    return prediction[0]

# Main execution
if __name__ == '__main__':
    category = sys.argv[1]
    description = sys.argv[2]

    # Make a prediction using the model
    result = make_prediction(category, description)

    # Write the result to a file
    with open("model_output.txt", "w") as file:
    file.write(f"Category: {category}\nDescription: {description}\nPredicted Issue: {result}\n")

    # Output for logging in C#
    print("Model result written to model_output.txt")